[{"content":"Deploying a Hugo Application Using GitHub Actions on a Self-Hosted Server In this tutorial, we will walk through the process of deploying a Hugo static site to a self-hosted server using GitHub Actions. This setup ensures an automated workflow where your changes are built and deployed to the server whenever you push updates to your repository.\nPrerequisites Before getting started, ensure you have the following:\nA Hugo application hosted on GitHub. Access to a self-hosted server with SSH enabled. Installed GitHub CLI or access to your repository\u0026rsquo;s settings. Step 1: Prepare Your Server Ensure your server is accessible via SSH. Install a web server (e.g., Nginx, Apache) to serve your Hugo site. Create a directory on the server where the Hugo site will be deployed (e.g., /var/www/hugo-site). Step 2: Generate an SSH Key Pair On your local machine, generate an SSH key pair: ssh-keygen -t rsa -b 4096 -C \u0026#34;your_email@example.com\u0026#34; Save the key without a passphrase.\nCopy the public key to the server:\nssh-copy-id user@your-server-ip Add the private key to your GitHub repository as a secret:\nNavigate to Settings \u0026gt; Secrets and variables \u0026gt; Actions. Add a new secret named DEPLOY_KEY and paste the private key. Step 3: Add Additional Secrets Add the server\u0026rsquo;s IP address:\nSecret name: DEPLOY_HOST_IP Value: Your server\u0026rsquo;s IP (e.g., 192.168.1.100). Add the server\u0026rsquo;s SSH username:\nSecret name: DEPLOY_USER Value: Your SSH username (e.g., user). Add the deployment path on the server:\nSecret name: DEPLOY_PATH Value: The path where the Hugo site will be deployed (e.g., /var/www/hugo-site). Add Hugo version (optional):\nSecret name: HUGO_VERSION Value: The version of Hugo you want to use (e.g., 0.117.0).\nStep 4: Configure the GitHub Actions Workflow Create a new file in your repository at .github/workflows/deploy.yml and add the following content:\nname: Deploy Hugo Blog to Production on: push jobs: deploy-hugo-blog: runs-on: ubuntu-22.04 steps: - name: Checkout repository uses: actions/checkout@v4 - name: Load Hugo version from environment run: | . ./.env echo \u0026#34;HUGO_VERSION=${HUGO_VERSION}\u0026#34; \u0026gt;\u0026gt; $GITHUB_ENV - name: Install Hugo static site generator uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;${{ env.HUGO_VERSION }}\u0026#39; extended: true - name: Configure Hugo module cache uses: actions/cache@v3 with: path: /tmp/hugo_cache key: ${{ runner.os }}-hugo-modules-${{ hashFiles(\u0026#39;**/go.sum\u0026#39;) }} restore-keys: | ${{ runner.os }}-hugo-modules- - name: Generate static site env: TZ: \u0026#39;Europe/Berlin\u0026#39; run: hugo --minify - name: Configure SSH deployment key uses: shimataro/ssh-key-action@v2 with: key: ${{ secrets.DEPLOY_KEY }} known_hosts: unnecessary - name: Configure SSH known hosts run: ssh-keyscan -H ${{ secrets.DEPLOY_HOST_IP }} \u0026gt;\u0026gt; ~/.ssh/known_hosts - name: Sync site to production server run: rsync -vaz --delete ./public/ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST_IP }}:${{ secrets.DEPLOY_PATH }} Conclusion You can also check the pipeline of this blogs workflow","href":"https://ugurkoysuren.com/programming/deploy-hugo-github-actions/","kind":"page","lang":"en","lastmod":"2025-01-01T20:35:10+02:00","objectID":"64519d68263f2e26487339482fc9fc68","publishDate":"2025-01-01T20:35:10+02:00","section":"programming","tags":["Hugo","Github","Workflows","Github Actions","Devops"],"title":"Deploying a Hugo Application using Github Actions on a a self hosted Server","type":"programming"}]